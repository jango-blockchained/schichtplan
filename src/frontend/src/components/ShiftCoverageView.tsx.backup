import React from 'react';
import { Card } from '@/components/ui/card';
import { Settings, Shift } from '@/types';
import { parse, differenceInMinutes } from 'date-fns';

const ALL_DAYS = ['Sonntag', 'Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag'];

const timeToMinutes = (time: string): number => {
    const parsedTime = parse(time, 'HH:mm', new Date());
    return parsedTime.getHours() * 60 + parsedTime.getMinutes();
};

const formatTime = (hours: number, minutes: number = 0): string => {
    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
};

interface ShiftCoverageViewProps {
    settings: Settings;
    shifts: Shift[];
}

export const ShiftCoverageView: React.FC<ShiftCoverageViewProps> = ({ settings, shifts }) => {
    // Calculate extended time range including keyholder times
    const storeOpeningMinutes = timeToMinutes(settings.general.store_opening);
    const storeClosingMinutes = timeToMinutes(settings.general.store_closing);

    const startMinutes = storeOpeningMinutes - settings.general.keyholder_before_minutes;
    const endMinutes = storeClosingMinutes + settings.general.keyholder_after_minutes;

    const startHour = Math.floor(startMinutes / 60);
    const endHour = Math.ceil(endMinutes / 60);
    const totalHours = endHour - startHour;
    const totalMinutes = totalHours * 60;

    // Generate time labels for the timeline
    const timeLabels = Array.from({ length: totalHours + 1 }, (_, i) => {
        const hour = startHour + i;
        return formatTime(hour);
    });

    // Helper function to calculate precise positioning
    const calculatePosition = (time: string) => {
        const timeInMinutes = timeToMinutes(time);
        const relativeMinutes = timeInMinutes - startMinutes;
        return (relativeMinutes / totalMinutes) * 100;
    };

    // Helper function to calculate width
    const calculateWidth = (startTime: string, endTime: string) => {
        const startTimeInMinutes = timeToMinutes(startTime);
        const endTimeInMinutes = timeToMinutes(endTime);
        const widthMinutes = endTimeInMinutes - startTimeInMinutes;
        return (widthMinutes / totalMinutes) * 100;
    };

    // Helper function to render keyholder time block
    const renderKeyholderTime = (isBefore: boolean, widthPercentage: number) => {
        return (
            <div
                className={`absolute h-8 top-1/2 -translate-y-1/2 bg-yellow-100 border border-yellow-300 ${isBefore ? 'rounded-l-md' : 'rounded-r-md'}`}
                style={{
                    [isBefore ? 'left' : 'right']: 0,
                    width: `${widthPercentage}%`,
                }}
                title={`Keyholder time ${isBefore ? 'before opening' : 'after closing'} (${isBefore ? settings.general.keyholder_before_minutes : settings.general.keyholder_after_minutes} min)`}
            />
        );
    };

    // Helper function to render shift blocks
    const renderShiftBlock = (shift: Shift, day: string) => {
        const left = calculatePosition(shift.start_time);
        const width = calculateWidth(shift.start_time, shift.end_time);

        return (
            <div
                key={`${shift.id}-${day}`}
                className="absolute h-8 top-1/2 -translate-y-1/2 bg-primary/20 border border-primary rounded-md overflow-hidden"
                style={{
                    left: `${left}%`,
                    width: `${width}%`,
                    minWidth: '40px',
                }}
                title={`${shift.start_time}-${shift.end_time} (${shift.min_employees}-${shift.max_employees} MA)`}
            >
                <div className="absolute inset-0 flex items-center justify-center text-xs font-medium truncate px-1">
                    {shift.min_employees}-{shift.max_employees} MA
                </div>
            </div>
        );
    };

    // Helper function to render employee count
    const renderEmployeeCount = (dayShifts: Shift[]) => {
        const totalMaxEmployees = dayShifts.reduce((acc, shift) => acc + shift.max_employees, 0);
        return (
            <div className="absolute right-0 top-1/2 -translate-y-1/2 flex items-center space-x-2">
                <span className="text-xs text-muted-foreground">
                    {totalMaxEmployees} MA max
                </span>
            </div>
        );
    };

    return (
        <Card className="p-4 space-y-4">
            <h3 className="font-semibold text-lg">Schichtabdeckung</h3>
            <div className="relative w-full">
                {/* Time labels */}
                <div className="flex w-full text-xs text-muted-foreground mb-2">
                    {timeLabels.map((label) => (
                        <div
                            key={label}
                            className="flex-1 text-center"
                        >
                            {label}
                        </div>
                    ))}
                </div>

                {/* Day rows */}
                <div className="space-y-2">
                    {ALL_DAYS.map((day, dayIndex) => {
                        const isStoreOpen = settings.general.opening_days[dayIndex.toString()];
                        const dayShifts = shifts.filter(shift => shift.active_days[dayIndex.toString()]);

                        // Pre-calculate keyholder widths
                        const keyholderBeforeWidth = (settings.general.keyholder_before_minutes / totalMinutes) * 100;
                        const keyholderAfterWidth = (settings.general.keyholder_after_minutes / totalMinutes) * 100;

                        return (
                            <div key={day} className="relative h-12 flex items-center">
                                {/* Day label */}
                                <div className="absolute -left-20 top-1/2 -translate-y-1/2 w-16 text-sm font-medium">
                                    {day}
                                </div>

                                {/* Store hours background */}
                                <div className={`h-10 rounded-md flex-grow relative ${isStoreOpen ? 'bg-muted' : 'bg-muted/30'}`}>
                                    {/* Keyholder time before opening */}
                                    {isStoreOpen && renderKeyholderTime(true, keyholderBeforeWidth)}

                                    {/* Keyholder time after closing */}
                                    {isStoreOpen && renderKeyholderTime(false, keyholderAfterWidth)}

                                    {/* Shift blocks */}
                                    {isStoreOpen && dayShifts.map((shift) => renderShiftBlock(shift, day))}
                                </div>

                                {/* Employee count indicators */}
                                {isStoreOpen && renderEmployeeCount(dayShifts)}
                            </div>
                        );
                    })}
                </div>

                {/* Legend */}
                <div className="mt-4 flex items-center space-x-4 text-xs text-muted-foreground">
                    <div className="flex items-center space-x-2">
                        <div className="w-3 h-3 bg-muted rounded-sm"></div>
                        <span>Ã–ffnungszeit</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <div className="w-3 h-3 bg-primary/20 border border-primary rounded-sm"></div>
                        <span>Schicht</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <div className="w-3 h-3 bg-yellow-100 border border-yellow-300 rounded-sm"></div>
                        <span>Keyholder Zeit</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <div className="w-3 h-3 bg-muted/30 rounded-sm"></div>
                        <span>Geschlossen</span>
                    </div>
                </div>
            </div>
        </Card>
    );
}; 