import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Separator } from '@/components/ui/separator';
import { Switch } from '@/components/ui/switch';
import { MEPAbsenceType, SimplifiedPDFConfig } from '@/types/SimplifiedPDFConfig';
import { PlusCircle, X } from 'lucide-react';

export interface MEPFooterSectionProps {
  config: SimplifiedPDFConfig;
  onChange: (updates: Partial<SimplifiedPDFConfig>) => void;
  className?: string;
}

export const MEPFooterSection: React.FC<MEPFooterSectionProps> = ({
  config,
  onChange,
  className = '',
}) => {
  // Handler for break rules
  const handleBreakRulesChange = (field: 'enabled' | 'text', value: boolean | string) => {
    onChange({
      footer: {
        ...config.footer,
        break_rules: {
          ...config.footer.break_rules,
          [field]: value,
        },
      },
    });
  };

  // Handler for absence types
  const handleAbsenceTypesChange = (field: 'enabled' | 'title', value: boolean | string) => {
    onChange({
      footer: {
        ...config.footer,
        absence_types: {
          ...config.footer.absence_types,
          [field]: value,
        },
      },
    });
  };

  // Handler for individual absence type
  const handleAbsenceTypeChange = (index: number, field: keyof MEPAbsenceType, value: string) => {
    const newTypes = [...config.footer.absence_types.types];
    newTypes[index] = {
      ...newTypes[index],
      [field]: value,
    };

    onChange({
      footer: {
        ...config.footer,
        absence_types: {
          ...config.footer.absence_types,
          types: newTypes,
        },
      },
    });
  };

  // Add new absence type
  const addAbsenceType = () => {
    onChange({
      footer: {
        ...config.footer,
        absence_types: {
          ...config.footer.absence_types,
          types: [
            ...config.footer.absence_types.types,
            { code: '', label: '' },
          ],
        },
      },
    });
  };

  // Remove absence type
  const removeAbsenceType = (index: number) => {
    const newTypes = config.footer.absence_types.types.filter((_, i) => i !== index);
    onChange({
      footer: {
        ...config.footer,
        absence_types: {
          ...config.footer.absence_types,
          types: newTypes,
        },
      },
    });
  };

  // Handler for instructions
  const handleInstructionsChange = (field: 'enabled' | 'text', value: boolean | string) => {
    onChange({
      footer: {
        ...config.footer,
        instructions: {
          ...config.footer.instructions,
          [field]: value,
        },
      },
    });
  };

  // Handler for date stamp
  const handleDateStampChange = (field: 'enabled' | 'text', value: boolean | string) => {
    onChange({
      footer: {
        ...config.footer,
        date_stamp: {
          ...config.footer.date_stamp,
          [field]: value,
        },
      },
    });
  };

  return (
    <Card className={className}>
      <CardHeader>
        <CardTitle className="text-sm font-medium">Fußbereich</CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Break Rules */}
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <Label>Pausenregelung</Label>
            <Switch
              checked={config.footer.break_rules.enabled}
              onCheckedChange={(checked) => handleBreakRulesChange('enabled', checked)}
            />
          </div>
          {config.footer.break_rules.enabled && (
            <Input
              value={config.footer.break_rules.text}
              onChange={(e) => handleBreakRulesChange('text', e.target.value)}
              placeholder="Pausenregelung Text"
            />
          )}
        </div>

        <Separator />

        {/* Absence Types */}
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <Label>Abwesenheitscodes</Label>
            <Switch
              checked={config.footer.absence_types.enabled}
              onCheckedChange={(checked) => handleAbsenceTypesChange('enabled', checked)}
            />
          </div>
          {config.footer.absence_types.enabled && (
            <div className="space-y-4">
              <Input
                value={config.footer.absence_types.title}
                onChange={(e) => handleAbsenceTypesChange('title', e.target.value)}
                placeholder="Abwesenheitscodes Titel"
              />
              <div className="space-y-2">
                {config.footer.absence_types.types.map((type, index) => (
                  <div key={index} className="grid grid-cols-[1fr_2fr_auto] gap-2 items-center">
                    <Input
                      value={type.code}
                      onChange={(e) => handleAbsenceTypeChange(index, 'code', e.target.value)}
                      placeholder="Code"
                      className="w-20"
                    />
                    <Input
                      value={type.label}
                      onChange={(e) => handleAbsenceTypeChange(index, 'label', e.target.value)}
                      placeholder="Bezeichnung"
                    />
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => removeAbsenceType(index)}
                      className="h-8 w-8"
                    >
                      <X className="h-4 w-4" />
                    </Button>
                  </div>
                ))}
                <Button
                  variant="outline"
                  size="sm"
                  onClick={addAbsenceType}
                  className="w-full"
                >
                  <PlusCircle className="h-4 w-4 mr-2" />
                  Code hinzufügen
                </Button>
              </div>
            </div>
          )}
        </div>

        <Separator />

        {/* Instructions */}
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <Label>Hinweise</Label>
            <Switch
              checked={config.footer.instructions.enabled}
              onCheckedChange={(checked) => handleInstructionsChange('enabled', checked)}
            />
          </div>
          {config.footer.instructions.enabled && (
            <Input
              value={config.footer.instructions.text}
              onChange={(e) => handleInstructionsChange('text', e.target.value)}
              placeholder="Hinweistext"
            />
          )}
        </div>

        <Separator />

        {/* Date Stamp */}
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <Label>Datumsstempel</Label>
            <Switch
              checked={config.footer.date_stamp.enabled}
              onCheckedChange={(checked) => handleDateStampChange('enabled', checked)}
            />
          </div>
          {config.footer.date_stamp.enabled && (
            <Input
              value={config.footer.date_stamp.text}
              onChange={(e) => handleDateStampChange('text', e.target.value)}
              placeholder="Datumsstempel Text"
            />
          )}
        </div>
      </CardContent>
    </Card>
  );
};
