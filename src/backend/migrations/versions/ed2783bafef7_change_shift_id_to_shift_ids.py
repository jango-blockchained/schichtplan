"""Change shift_id to shift_ids in Coverage model

Revision ID: ed2783bafef7
Revises: 75e9e2ee041c
Create Date: 2025-03-01 02:27:48.688873

"""

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "ed2783bafef7"
down_revision = "75e9e2ee041c"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("coverage", schema=None) as batch_op:
        # First, get all existing shift_id values
        connection = op.get_bind()
        coverage_table = sa.Table(
            "coverage",
            sa.MetaData(),
            sa.Column("id", sa.Integer()),
            sa.Column("shift_id", sa.Integer()),
        )
        coverage_data = connection.execute(coverage_table.select()).fetchall()

        # Drop the old shift_id column and its foreign key
        batch_op.drop_constraint("fk_coverage_shift", type_="foreignkey")
        batch_op.drop_column("shift_id")

        # Add the new shift_ids column
        batch_op.add_column(sa.Column("shift_ids", sa.JSON(), nullable=True))

        # Convert old shift_id values to shift_ids arrays
        for row in coverage_data:
            if row.shift_id is not None:
                connection.execute(
                    coverage_table.update()
                    .where(coverage_table.c.id == row.id)
                    .values(shift_ids=[row.shift_id])
                )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("coverage", schema=None) as batch_op:
        # First, get all existing shift_ids values
        connection = op.get_bind()
        coverage_table = sa.Table(
            "coverage",
            sa.MetaData(),
            sa.Column("id", sa.Integer()),
            sa.Column("shift_ids", sa.JSON()),
        )
        coverage_data = connection.execute(coverage_table.select()).fetchall()

        # Drop the shift_ids column
        batch_op.drop_column("shift_ids")

        # Add back the shift_id column
        batch_op.add_column(sa.Column("shift_id", sa.Integer(), nullable=True))
        batch_op.create_foreign_key("fk_coverage_shift", "shifts", ["shift_id"], ["id"])

        # Convert shift_ids arrays back to single shift_id values
        for row in coverage_data:
            if row.shift_ids and len(row.shift_ids) > 0:
                connection.execute(
                    coverage_table.update()
                    .where(coverage_table.c.id == row.id)
                    .values(shift_id=row.shift_ids[0])
                )

    # ### end Alembic commands ###
