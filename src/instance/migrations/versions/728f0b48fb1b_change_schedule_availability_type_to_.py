"""Change Schedule.availability_type to Enum and update values

Revision ID: 728f0b48fb1b
Revises: d433bcfaf979
Create Date: 2025-05-13 23:35:23.997800

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '728f0b48fb1b'
down_revision = 'd433bcfaf979'
branch_labels = None
depends_on = None

# Define the Enum type for use in the migration script, matching the model
availability_type_enum = sa.Enum('AVAILABLE', 'FIXED', 'PREFERRED', 'UNAVAILABLE', name='availabilitytype')

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Data migration: Update existing string values to the new Enum values
    # Before altering the column, which might cause errors with existing non-Enum data.
    op.execute("UPDATE schedules SET availability_type = 'FIXED' WHERE availability_type = 'FIXED'")
    op.execute("UPDATE schedules SET availability_type = 'AVAILABLE' WHERE availability_type = 'AVAILABLE'") # Assuming AVAILABLE was a possible short form
    op.execute("UPDATE schedules SET availability_type = 'PREFERRED' WHERE availability_type = 'PREFERRED'") # Assuming PREFERRED was a possible short form
    op.execute("UPDATE schedules SET availability_type = 'UNAVAILABLE' WHERE availability_type = 'UNAVAILABLE'") # Assuming UNAVAILABLE was a possible short form
    # Handle NULLs or other unexpected values if necessary. For example, to default NULLs:
    # op.execute("UPDATE schedules SET availability_type = 'AVAILABLE' WHERE availability_type IS NULL")
    # Or if the column should not be nullable after migration, ensure all values are set.

    with op.batch_alter_table('schedules', schema=None) as batch_op:
        batch_op.alter_column('availability_type',
               existing_type=sa.VARCHAR(length=15),
               type_=availability_type_enum, # Use the defined Enum type
               existing_nullable=True)
               # postgresql_using allows for an explicit cast if needed, e.g.
               # postgresql_using='availability_type::availabilitytype'
               # However, Alembic/SQLAlchemy should handle the VARCHAR to ENUM conversion
               # if the string values are already members of the ENUM after the UPDATEs.

    with op.batch_alter_table('settings', schema=None) as batch_op:
        batch_op.alter_column('special_days',
               existing_type=sa.TEXT(),
               type_=sa.JSON(),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'"))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('settings', schema=None) as batch_op:
        batch_op.alter_column('special_days',
               existing_type=sa.JSON(),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'"))

    with op.batch_alter_table('schedules', schema=None) as batch_op:
        batch_op.alter_column('availability_type',
               existing_type=availability_type_enum, # Use the defined Enum type
               type_=sa.VARCHAR(length=15),
               existing_nullable=True)

    # If you want to revert data on downgrade (optional, and can be lossy):
    # op.execute("UPDATE schedules SET availability_type = 'FIXED' WHERE availability_type = 'FIXED'")
    # op.execute("UPDATE schedules SET availability_type = 'AVAILABLE' WHERE availability_type = 'AVAILABLE'")
    # op.execute("UPDATE schedules SET availability_type = 'PREFERRED' WHERE availability_type = 'PREFERRED'")
    # op.execute("UPDATE schedules SET availability_type = 'UNAVAILABLE' WHERE availability_type = 'UNAVAILABLE'")

    # ### end Alembic commands ###
