#!/bin/bash
# =============================================================================
# Schichtplan MCP Server
# Provides access to the Schichtplan application through the Model Context Protocol
# =============================================================================

# Disable Flask debug mode as early as possible
export FLASK_DEBUG=0
export WERKZEUG_RUN_MAIN=true
export PYTHONUNBUFFERED=1

# Set absolute path to the project directory
PROJECT_DIR="/home/jango/Git/schichtplan"

# Activate the virtual environment
source "$PROJECT_DIR/.venv/bin/activate"

# Set the PYTHONPATH to include the project directory
export PYTHONPATH="$PROJECT_DIR:$PYTHONPATH"

# Default configuration
SERVER_FILE="src/mcp/server.py"  # Real server with database connection
PORT=8000
MODE="dev"
VERBOSE=false
USE_MCP_CLI=false  # By default, run directly with Python for debugging
BACKEND_URL="http://127.0.0.1:5000"  # Default backend URL

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    run)
      MODE="run"
      shift
      ;;
    dev)
      MODE="dev"
      shift
      ;;
    --simplified|-s)
      SERVER_FILE="src/mcp/simple_server.py"  # Simplified server with mock data
      shift
      ;;
    --claude|-c)
      SERVER_FILE="src/mcp/claude_server.py"  # Claude-specific server
      shift
      ;;
    --port|-p)
      PORT="$2"
      shift 2
      ;;
    --backend-url)
      BACKEND_URL="$2"  # Custom backend URL
      shift 2
      ;;
    --verbose|-v)
      VERBOSE=true
      shift
      ;;
    --use-mcp-cli)
      USE_MCP_CLI=true  # Use the official MCP CLI (required for Claude integration)
      shift
      ;;
    --help|-h)
      echo "Usage: mcp-shifts [OPTIONS] [COMMAND]" >&2
      echo "" >&2
      echo "Commands:" >&2
      echo "  dev              Run in development mode with hot-reloading (default)" >&2
      echo "  run              Run in production mode" >&2
      echo "" >&2
      echo "Options:" >&2
      echo "  --simplified, -s Use the simplified server implementation (no database connection)" >&2
      echo "  --claude, -c     Use the Claude-specific server (optimized for Claude integration)" >&2
      echo "  --port, -p PORT  Specify the port to run on (default: 8000)" >&2
      echo "  --backend-url URL Specify the backend URL to connect to (default: http://127.0.0.1:5000)" >&2
      echo "  --verbose, -v    Show verbose output" >&2
      echo "  --use-mcp-cli    Use the official MCP CLI (required for Claude integration)" >&2
      echo "  --help, -h       Show this help message" >&2
      exit 0
      ;;
    *)
      echo "Unknown option: $1" >&2
      echo "Use --help to see available options" >&2
      exit 1
      ;;
  esac
done

# Run the MCP server
cd "$PROJECT_DIR"

# Set environment variables
export MCP_PORT="$PORT"
export FLASK_APP="$SERVER_FILE"
export MCP_BACKEND_URL="$BACKEND_URL"  # Pass backend URL to the server

# Set the MCP_CLI environment variable when using the MCP CLI
if [ "$USE_MCP_CLI" = true ]; then
  export MCP_CLI=1
  export FLASK_DEBUG=0
  export WERKZEUG_RUN_MAIN=true
  export PYTHONIOENCODING=utf-8
  
  # IMPORTANT: For MCP CLI, ensure no output to stdout
  # Send verbose logs to stderr only
  if [ "$VERBOSE" = true ]; then
    echo "Starting Schichtplan MCP Server for Claude (MCP CLI mode)" >&2
    echo "Mode: $MODE" >&2
    echo "Port: $PORT" >&2
    echo "Server file: $SERVER_FILE" >&2
    echo "Backend URL: $BACKEND_URL" >&2
    echo "Using MCP CLI for stdio transport - logs redirected to file: src/mcp/claude_server.log" >&2
  fi

  # Run the server with absolutely zero output to stdout except the JSON init message
  # Use exec to completely replace this process with the MCP CLI
  # We ensure:
  # 1. No shell script output after this point
  # 2. No Python startup banners
  # 3. No extra Flask diagnostic messages
  if [ "$MODE" = "run" ]; then
    PYTHONIOENCODING=utf-8 exec mcp run "$SERVER_FILE"
  else
    PYTHONIOENCODING=utf-8 exec mcp dev "$SERVER_FILE"
  fi
else
  # For testing and development, run Python directly with normal output
  if [ "$VERBOSE" = true ]; then
    echo "Starting Schichtplan MCP Server" >&2
    echo "Mode: $MODE" >&2
    echo "Port: $PORT" >&2
    echo "Server file: $SERVER_FILE" >&2
    echo "Backend URL: $BACKEND_URL" >&2
    echo "Using direct Python execution" >&2
  fi
  
  # Start server directly with Python for testing/development
  echo "Starting server directly with Python..." >&2
  python "$SERVER_FILE"
fi 