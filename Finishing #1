### Phase 1: Backend Completion (3 days)
1. **Enhance Schedule Generation (Priority)**
   - [IN PROGRESS] Implement constraint checks from `docs/Beschäftigungsmodelle.md`
   - [COMPLETED] Add break calculation logic from `schedule_generator.py:120-133`
   - [IN PROGRESS] Integrate employee group rules from `useEmployeeGroups.ts:12-45`
   
2. **Complete Employee API Endpoints**
   - [IN PROGRESS] Connect `EmployeesPage.tsx` to backend
   - [IN PROGRESS] Add validation using `EmployeeSettingsEditor.tsx:25-58` groups
   
3. **PDF Generation Enhancement**
   - [COMPLETED] Implement layout config handling from `LayoutCustomizer.tsx:19-197`
   - [COMPLETED] Connect to export endpoint in `api.ts:196-209`
   

### Phase 2: Frontend Integration (2 days)
1. **Schedule Display Implementation**
   - [IN PROGRESS] Connect `ShiftTable.tsx` to real data from `getSchedules` (api.ts:181-194)
   - [IN PROGRESS] Implement hour calculations from `ShiftTable.tsx:101-109`
   
2. **Layout Customization UI**
   - [COMPLETED] Complete `LayoutCustomizer.tsx` with preset handling
   - [COMPLETED] Connect to PDF export functionality
   

### Phase 3: Advanced Features (2 days)
1. **Drag-and-Drop Editing**
   - [NOT STARTED] Implement react-beautiful-dnd integration in `ShiftTable.tsx`
   - [NOT STARTED] Add validation using backend constraints

2. **Complex Rule Visualization**
   - [NOT STARTED] Create visual indicators for constraint violations
   - [NOT STARTED] Add tooltips referencing `Beschäftigungsmodelle.md` rules

### Phase 4: Testing & Deployment (1 day)
1. **End-to-End Testing**
   - [NOT STARTED] Test full workflow from employee creation to PDF export

2. **Deployment Preparation**
   - [NOT STARTED] Configure database migrations from `25ff7c9714ea_add_settings_table.py`
   - [NOT STARTED] Set up production Dockerfile and environment variables

### Current Priority Tasks:
1. [IN PROGRESS] Complete schedule generation constraints
2. [IN PROGRESS] Connect frontend tables to real API data
3. [COMPLETED] ✅ Implement PDF layout customization
4. [IN PROGRESS] Add employee validation rules

### Next Steps:
1. Complete the schedule generation constraints by implementing:
   - Maximum daily/weekly hours per employee group
   - Break time rules for different shift durations
   - Keyholder requirements for early/late shifts

2. Finish connecting the frontend tables by:
   - Implementing the hour calculation functions
   - Adding real-time data updates
   - Handling loading and error states

3. Add employee validation rules:
   - Implement group-specific hour constraints
   - Add validation for keyholder assignments
   - Create error messages for constraint violations 