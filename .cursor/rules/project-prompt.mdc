---
description: 
globs: 
alwaysApply: true
---

**LLM Introduction:**
"You are an AI assistant helping with the 'Schichtplan' project. This context is vital for accurate and efficient support. Refer to it in your responses."

---

**1. Project Overview**

*   **1.1. Project Name:** `Schichtplan`
*   **1.2. Main Goal:** Full-stack employee scheduling system for creating, managing, and optimizing shift plans.
*   **1.3. Core Functionality:**
    *   Shift plan creation/management with versioning.
    *   Define shifts (e.g., Early, Middle, Late) and coverage needs.
    *   Manage employee availability (Fixed, Preferred, Available).
    *   Automated shift assignment based on rules and preferences.
    *   Display plan statistics and metrics.
*   **1.4. Technology Stack:**
    *   **Backend:** Python, Flask, SQLAlchemy (ORM), Alembic (migrations).
    *   **Frontend:** TypeScript, React, Vite, Shadcn UI (customized Radix UI).

---

**2. Project Structure**

*   **2.1. Key Backend Directories (under [src/backend/](mdc:src/backend)):**
    *   [app.py](mdc:src/backend/app.py): Flask app initialization.
    *   [run.py](mdc:src/backend/run.py): Flask app startup script.
    *   [models/](mdc:src/backend/models): SQLAlchemy DB models.
    *   [migrations/](mdc:src/backend/migrations): Alembic DB migration scripts.
    *   [routes/](mdc:src/backend/routes): API endpoint definitions.
    *   [services/](mdc:src/backend/services): Business logic.
        *   [services/scheduler/](mdc:src/backend/services/scheduler): Core scheduling components ([generator.py](mdc:src/backend/services/scheduler/generator.py), [distribution.py](mdc:src/backend/services/scheduler/distribution.py), [resources.py](mdc:src/backend/services/scheduler/resources.py), [availability.py](mdc:src/backend/services/scheduler/availability.py), [constraints.py](mdc:src/backend/services/scheduler/constraints.py)).
    *   [tests/](mdc:src/backend/tests): Pytest backend tests.
    *   [utils/](mdc:src/backend/utils): Utilities (e.g., [logger.py](mdc:src/backend/utils/logger.py)).
    *   [tools/](mdc:src/backend/tools): Debugging tools, data operations (e.g., [debug/scheduler_companion.py](mdc:src/backend/tools/debug/scheduler_companion.py)).
*   **2.2. Key Frontend Directories (under [src/frontend/](mdc:src/frontend)):**
    *   [src/main.tsx](mdc:src/frontend/src/main.tsx): React app entry point.
    *   [src/components/](mdc:src/frontend/src/components): Reusable UI components.
        *   [src/components/ui/](mdc:src/frontend/src/components/ui): Base UI components (Shadcn UI).
        *   [src/components/Schedule/](mdc:src/frontend/src/components/Schedule): Schedule display components (e.g., [ScheduleTable.tsx](mdc:src/frontend/src/components/Schedule/ScheduleTable.tsx), [ScheduleStatistics.tsx](mdc:src/frontend/src/components/Schedule/ScheduleStatistics.tsx)).
    *   [src/pages/](mdc:src/frontend/src/pages): Page-specific components.
    *   [src/hooks/](mdc:src/frontend/src/hooks): Custom React hooks (e.g., [useVersionControl.ts](mdc:src/frontend/src/hooks/useVersionControl.ts), [useScheduleGeneration.ts](mdc:src/frontend/src/hooks/useScheduleGeneration.ts)).
    *   [src/services/](mdc:src/frontend/src/services) (or [src/api/](mdc:src/frontend/src/api)): Backend API communication.
    *   [src/types/](mdc:src/frontend/src/types): TypeScript type definitions.
*   **2.3. Important Config Files:**
    *   [requirements.txt](mdc:requirements.txt) (root): Backend Python dependencies.
    *   [package.json](mdc:package.json) (root): Frontend dependencies & scripts.
    *   Alembic config (implicit via [src/backend/migrations/](mdc:src/backend/migrations)).
    *   [vite.config.ts](mdc:src/frontend/vite.config.ts) (in [src/frontend/](mdc:src/frontend)): Frontend build config.
    *   [.env](mdc:.env) (likely root): Environment variables.
*   **2.4. Application Entry Points:**
    *   Backend: [src/backend/run.py](mdc:src/backend/run.py), [src/backend/app.py](mdc:src/backend/app.py).
    *   Frontend: [src/frontend/src/main.tsx](mdc:src/frontend/src/main.tsx).

---

**3. Core Concepts & Terminology**

*   **3.1. Project-Specific Terms:**
    *   **Schedules:** Individual shift assignments (employee, date, shift).
    *   **Shifts:** Pre-defined time slots (e.g., Early, Middle, Late).
    *   **Versions:** A schedule has a version, allowing multiple scenarios.
    *   **Availability Types:** Employee availability (Fixed, Preferred, Available).
    *   **Coverage:** Rules defining employee needs for shifts/periods.
    *   **Shift Templates:** Base definitions for shifts.
*   **3.2. Key Data Models (assumed):**
    *   **Employee:** Staff info.
    *   **ShiftTemplate:** Templates for shifts (name, times, active_days).
    *   **Coverage:** Staffing requirement rules.
    *   **Absence:** Employee leave records.
    *   **EmployeeAvailability:** Staff preferences/availability.
    *   **Schedule/Assignment:** Specific employee-shift-date assignment.
    *   **Version:** Identifier for a planning iteration.

---

**4. Key Components & Functionalities**

*   **4.1. Critical Backend Modules/Files:**
    *   **[src/backend/services/scheduler/generator.py](mdc:src/backend/services/scheduler/generator.py) (ScheduleGenerator):** Orchestrates scheduling. Key methods: `generate_schedule()`, `_process_coverage()`, `_create_date_shifts()`.
    *   **[src/backend/services/scheduler/distribution.py](mdc:src/backend/services/scheduler/distribution.py) (DistributionManager):** Assigns employees to shifts. Key methods: `assign_employees_to_shifts()`, `assign_employees_by_type()`, `get_available_employees()`.
    *   **[src/backend/services/scheduler/resources.py](mdc:src/backend/services/scheduler/resources.py) (ScheduleResources):** Loads DB data for scheduler.
    *   **[src/backend/services/scheduler/availability.py](mdc:src/backend/services/scheduler/availability.py) (AvailabilityChecker):** Checks employee availability.
    *   **[src/backend/services/scheduler/constraints.py](mdc:src/backend/services/scheduler/constraints.py) (ConstraintChecker):** Validates assignments against work rules.
    *   **[src/backend/utils/logger.py](mdc:src/backend/utils/logger.py):** Central logging.
*   **4.2. Critical Frontend Components/Pages:**
    *   **[src/frontend/src/hooks/useVersionControl.ts](mdc:src/frontend/src/hooks/useVersionControl.ts):** Manages schedule versions.
    *   **[src/frontend/src/hooks/useScheduleGeneration.ts](mdc:src/frontend/src/hooks/useScheduleGeneration.ts):** Handles generation process & UI logging.
    *   **[src/frontend/src/components/ScheduleTable.tsx](mdc:src/frontend/src/components/Schedule/ScheduleTable.tsx)** (or [ScheduleView.jsx](mdc:src/frontend/components/Schedule/ScheduleView.jsx) as per original guide): Main schedule display/interaction.
    *   **[src/frontend/src/components/Schedule/ScheduleStatistics.tsx](mdc:src/frontend/src/components/Schedule/ScheduleStatistics.tsx):** Displays version-filtered metrics.
*   **4.3. Key Algorithms/Business Logic Flows:**
    *   **Schedule Generation Flow:** Resource loading (`ScheduleResources`) -> Coverage processing (`_process_coverage`) -> Date-shift creation (`_create_date_shifts`) -> Employee assignment (`DistributionManager` using `AvailabilityChecker`, `ConstraintChecker`).
    *   **Frontend Version Management:** Logic in [useVersionControl.ts](mdc:src/frontend/src/hooks/useVersionControl.ts).

---

**5. Dev Environment & Tools**

*   **5.1. Version Control:** Git. (Branching conventions not specified).
*   **5.2. Build/Package Managers:**
    *   Backend: `pip` ([requirements.txt](mdc:requirements.txt)).
    *   Frontend: `npm` ([package.json](mdc:package.json)), Vite (build).
*   **5.3. Test Frameworks & Locations:**
    *   Backend: `pytest` ([src/backend/tests/](mdc:src/backend/tests)).
    *   Frontend: Likely Jest/React Testing Library (in [src/frontend/src/components/__tests__/](mdc:src/frontend/src/components/__tests__) and [src/frontend/src/pages/__tests__/](mdc:src/frontend/src/pages/__tests__)).
*   **5.4. Debugging Tools/Scripts (from [src/backend/tools/debug/](mdc:src/backend/tools/debug)):**
    *   `python -m src.backend.tools.debug.scheduler_companion --diagnostic`
    *   `python -m src.backend.tools.debug.scheduler_companion --fix-active-days`
    *   `python -m src.backend.tools.debug.scheduler_companion --create-assignments`
    *   `python -m src.backend.tools.debug.scheduler_companion --test-components`
    *   Others: [test_schedule_generation.py](mdc:src/backend/tools/debug/test_schedule_generation.py), [trace_scheduler_steps.py](mdc:src/backend/tools/debug/trace_scheduler_steps.py), [standalone_scheduler_test.py](mdc:src/backend/tools/debug/standalone_scheduler_test.py), [manual_assignment_test.py](mdc:src/backend/tools/debug/manual_assignment_test.py).

---

**6. Coding Standards & Best Practices**

*   **6.1. Linters/Formatters:**
    *   Backend: Likely Black, Ruff (found in venv).
    *   Frontend: (Not specified, commonly ESLint, Prettier).
*   **6.2. Architecture Patterns:**
    *   Backend: Implied Layered Architecture (Routes -> Services -> Models). Specific "Schedule Generation Architecture."
    *   Frontend: Component-Based (React).
*   **6.3. Key Dos & Don'ts:** (Not specified, assume general best practices).

---

**7. Logging & Error Handling**

*   **7.1. Logging Implementation:**
    *   Libs: Central logger ([src/backend/utils/logger.py](mdc:src/backend/utils/logger.py)), `ProcessTracker` ([src/backend/services/scheduler/logging_utils.py](mdc:src/backend/services/scheduler/logging_utils.py)).
    *   Paths: [src/logs/diagnostics/](mdc:src/logs/diagnostics), [src/logs/sessions/](mdc:src/logs/sessions).
    *   Formats: JSON (`schedule_logger`, `app_logger`, `error_logger`), Plain Text (`diagnostic_logger`).
*   **7.2. Main Loggers & Purpose:**
    *   `schedule_logger`: Schedule-related events (JSON).
    *   `app_logger`: Application-level events (JSON).
    *   `error_logger`: Errors & debug info (JSON).
    *   `diagnostic_logger`: Session-specific debug (Plain Text).
    *   `ProcessTracker`: Tracks steps, timing, context of scheduler operations.
*   **7.3. Common Error Patterns & Handling (see "Common Issues Preventing Shift Assignments" in guide):**
    *   Resource Loading Issues: Missing DB data.
    *   No Demand: No coverage / `min_employees` is 0.
    *   No Shifts Available: `active_days` mismatch.
    *   Demand/Shift Mismatch: `shift_id` mismatch.
    *   All Employees Unavailable: Leave/unavailable records.
    *   Constraint Violations: Work rule violations.

---

**8. Known Issues & Quirks**

*   **8.1. Recurring Problems:**
    *   **Scheduler:** Missing/empty `active_days` in `ShiftTemplate` model (e.g. [src/backend/models/shift_template.py](mdc:src/backend/models/shift_template.py) if that's the path); exact time matching needed for shifts/coverage; Flask-SQLAlchemy context issues.
    *   **Frontend:** [src/frontend/src/hooks/useVersionControl.ts](mdc:src/frontend/src/hooks/useVersionControl.ts) auto-selection can override manual; [src/frontend/src/components/Schedule/ScheduleStatistics.tsx](mdc:src/frontend/src/components/Schedule/ScheduleStatistics.tsx) version filtering.
*   **8.2. Complex/Error-Prone Areas:**
    *   Core scheduling logic ([src/backend/services/scheduler/](mdc:src/backend/services/scheduler)).
    *   Frontend versioning/state management ([src/frontend/src/hooks/useVersionControl.ts](mdc:src/frontend/src/hooks/useVersionControl.ts), [src/frontend/src/hooks/useScheduleGeneration.ts](mdc:src/frontend/src/hooks/useScheduleGeneration.ts)).
    *   Date/time logic, especially `active_days`.
*   **8.3. Known Solutions/Workarounds:**
    *   Missing `active_days`: `python -m src.backend.tools.debug.scheduler_companion --fix-active-days`.
    *   General Debugging: Enable detailed logging; systematic log review; data verification; temporarily relax constraints.

---

**9. LLM Interaction Style**

*   **9.1. Response Style:** Code snippets with clear explanations. High-level overview then details for complex topics. Ask clarifying questions if needed. Reference this document/specific files (e.g., "as in [DistributionManager](mdc:src/backend/services/scheduler/distribution.py)").
*   **9.2. Topics to Avoid/Handle with Care:** Major architecture changes without impact discussion (esp. scheduler). Date/time logic changes. Generating sensitive example data.
*   **9.3. Detail Level:** Sufficient to understand/implement. Refer to relevant doc sections/files. For troubleshooting, help interpret logs (see 7.2).
*   **9.4. Formatting:** Code blocks with language (e.g., \`\`\`python). File paths with `` prefix and mdc link (e.g., [path/to/file.py](mdc:path/to/file.py)). Inline code/variable names in backticks (e.g., `my_variable`).
*   **9.5. Other Preferences:** Solutions consistent with existing stack (Flask, SQLAlchemy, React, TS). Explain impacts of scheduler logic changes. If problem resembles known issues, highlight it. Encourage testing.

---

