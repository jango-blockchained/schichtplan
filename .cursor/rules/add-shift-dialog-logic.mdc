---
description:
globs:
alwaysApply: false
---
# Add Shift Dialog Logic

The `[AddScheduleDialog.tsx](mdc:src/frontend/src/components/Schedule/AddScheduleDialog.tsx)` component is used for manually adding or modifying individual schedule entries for employees.

## Input Flow and Data Dependencies

The dialog enforces a cascading selection order for inputs:

1.  **Date:** User selects a date using a calendar (`DatePicker`).
2.  **Employee:** Upon date selection, the dialog fetches the availability status for all active employees on that date by calling `getEmployeeAvailabilityByDate` (defined in `[api.ts](mdc:src/frontend/src/services/api.ts)`), which hits the `GET /api/availability/by_date` endpoint (defined in `[availability.py](mdc:src/backend/routes/availability.py)`). The employee dropdown (`Select`) is populated with employee names and their statuses (e.g., "Available", "Absence: Vacation", "Shift: Early"). Employees who are not "Available" are disabled.
3.  **Shift:** Once both a date and an available employee are selected, the dialog fetches applicable shifts for that employee on that date by calling `getApplicableShiftsForEmployee` (defined in `[api.ts](mdc:src/frontend/src/services/api.ts)`), which hits the `GET /api/availability/shifts_for_employee` endpoint (defined in `[availability.py](mdc:src/backend/routes/availability.py)`). This backend endpoint considers the employee's hourly availability (`EmployeeAvailability`) and the shift's active days (`ShiftTemplate.active_days`). The shift dropdown (`Select`) is populated with applicable shifts, displaying their name, times, and calculated `availability_type` (e.g., AVAILABLE, FIXED, PREFERRED).

## Saving Data

When the user selects a valid shift, the corresponding `availability_type` is stored in the component's state. On submission, the dialog calls the `onAddSchedule` prop function, passing the selected `employee_id`, `date`, `shift_id`, `version`, and the determined `availability_type`. This data is typically sent to the `PUT /api/schedules/<id>` endpoint (handled by `update_schedule` in `[schedules.py](mdc:src/backend/routes/schedules.py)`) to create or update the `Schedule` entry in the database.

## Relevant Types

Key TypeScript types for this interaction are defined in `[index.ts](mdc:src/frontend/src/types/index.ts)`:
*   `EmployeeAvailabilityStatus`: Structure for the response from `/api/availability/by_date`.
*   `ApplicableShift`: Structure for the response from `/api/availability/shifts_for_employee`.
*   `AvailabilityTypeStrings`: Defines the possible availability type values ('AVAILABLE', 'FIXED', 'PREFERRED', 'UNAVAILABLE').
*   `Schedule`: Represents a schedule entry, includes `availability_type`.
*   `ScheduleUpdate`: Payload for updating a schedule entry, includes `availability_type`.
