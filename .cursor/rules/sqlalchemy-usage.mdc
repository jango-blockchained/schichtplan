---
description: A guide to future development and debugging related to SQLAlchemy and Flask app context usage.
globs: 
alwaysApply: false
---
# SQLAlchemy Usage and App Context Rule

- The main SQLAlchemy instance is defined in [src/backend/models/__init__.py](mdc:src/backend/models/__init__.py) as `db = SQLAlchemy()`.
- All models and database operations must import and use `db` from this file.
- The Flask app factory is defined in [src/backend/app.py](mdc:src/backend/app.py) as `create_app()`, which must call `db.init_app(app)` after loading the config and before any database operations.
- All database operations (including in tests, scripts, and utilities) must be performed within an active Flask app context, e.g.:
  ```python
  app = create_app()
  with app.app_context():
      # DB operations here
  ```
- In tests, use the `app` fixture and ensure all DB access is within `with app.app_context():`.
- Never create a second `SQLAlchemy()` instance; always use the one from `models/__init__.py`.
- If you see errors about the Flask app not being registered with SQLAlchemy, check that you are inside an app context and using the correct `db` instance.
