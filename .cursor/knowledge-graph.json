{"type":"entity","name":"Schichtplan Project","entityType":"Project","observations":["A shift scheduling application with a Flask backend and React/TypeScript frontend","Key features include employee scheduling, shift templates, and automatic schedule generation","Project structure: Backend code in src/backend/, Frontend code in src/frontend/","Uses SQLite database with SQLAlchemy ORM","Development can be started using the start.sh script or manually setting up backend and frontend"]}
{"type":"entity","name":"Test Infrastructure","entityType":"Component","observations":["Uses pytest for backend testing","Testing is configured in src/backend/tests/conftest.py","Tests use fixtures for app, db, session, client, and runner","In-memory SQLite database is used for testing","Test sessions are set up to use scoped_session with proper transaction handling","Issues fixed included database connection problems and improper resource handling"]}
{"type":"entity","name":"Models","entityType":"Component","observations":["Key models include Employee, EmployeeAvailability, ShiftTemplate, Settings, Schedule, and Coverage","Employee model handles employee information, groups, and keyholder status","ShiftTemplate defines shift types (EARLY, MIDDLE, LATE) and validates store hours","Settings model contains configuration for store hours, breaks, and scheduling rules","Models use SQLAlchemy for ORM functionality","Validation logic exists to enforce business rules like store hours"]}
{"type":"entity","name":"ScheduleResources","entityType":"Component","observations":["Defined in src/backend/services/scheduler/resources.py","Centralizes resource loading for the scheduler (employees, shifts, coverage, availabilities)","Handles error conditions and provides fallback mechanisms","Includes methods for checking employee availability and getting employees by group","Supports special test functionality with mock objects","Provides caching of frequently accessed data"]}
{"type":"entity","name":"API Endpoints","entityType":"Component","observations":["REST API endpoints for employees, shifts, store configuration, and schedules","Tests in src/backend/tests/test_api.py cover CRUD operations for all resources","Schedule generation endpoint handles complex business logic","API responses use JSON format","API tests verify business rules like keyholder requirements and break time rules"]}
{"type":"entity","name":"Testing Challenges","entityType":"Issue","observations":["Database connection issues with 'ResourceClosedError: This Connection is closed'","Parameter mismatches between tests and model definitions","Missing Settings objects causing validation failures","Tests using incorrect formats for model attributes like active_days","ShiftTemplate validation failing due to missing store hours in Settings","Test database not properly initialized before running tests"]}
{"type":"entity","name":"Test Fixes","entityType":"Solution","observations":["Improved session fixture to properly handle database connections and transactions","Updated app fixture to explicitly use in-memory SQLite database","Added settings creation before testing ShiftTemplates","Fixed parameter formats for models (especially active_days in ShiftTemplate)","Enhanced ScheduleResources to better handle mock objects in tests","Added proper database initialization in test fixtures"]}
{"type":"entity","name":"Schedule Generation Logic","entityType":"Component","observations":["Implements complex business rules for schedule creation","Enforces constraints like keyholder requirements for early/late shifts","Implements German labor law requirements for breaks","Ensures employees don't work late shift followed by early shift","Respects weekly hour limits for employees","Handles various validation scenarios with proper error messaging"]}
{"type":"entity","name":"ShiftTemplate Validation","entityType":"Feature","observations":["Validates shift times against store opening/closing hours","Determines shift type (EARLY, MIDDLE, LATE) based on time","Calculates shift duration and validates against employee constraints","Handles validation of break requirements","Important for ensuring schedules follow business rules","Required proper handling in test environments with mock objects"]}
{"type":"entity","name":"Database Design","entityType":"Component","observations":["Uses SQLite for development and testing","Models include relationships between employees, shifts, and schedules","Settings model centralizes configuration","Uses SQLAlchemy for ORM functionality","Implements proper validation at the model level","Includes proper type definitions and constraints"]}
{"type":"entity","name":"Employee Availability System","entityType":"Feature","observations":["Manages employee availability for scheduling","Employees can specify available/unavailable time slots","System respects these constraints during schedule generation","Stores data in EmployeeAvailability model","Tested in tests/test_employee_availability.py","Needed fixes for proper mock handling in tests"]}
{"type":"entity","name":"Test Data Fixtures","entityType":"Component","observations":["Sets up test data for various test scenarios","Creates mock employees, shifts, and settings","Needed proper timing configuration to work with validation logic","Required improvements to handle database connections properly","Uses appropriate attributes for different employee groups (TZ, GFB, etc.)","Ensures keyholders are properly designated for testing constraints"]}
{"type":"entity","name":"Project Structure","entityType":"Architecture","observations":["Backend code is located in src/backend/","Frontend code is located in src/frontend/","Tests are organized in src/backend/tests/ with subdirectories for specialized tests","Models are defined in src/backend/models/","API routes are defined in src/backend/routes/","Services containing business logic are in src/backend/services/","Scheduler-specific code is in src/backend/services/scheduler/","Frontend components are in src/frontend/src/components/","Database migrations are handled through Flask-Migrate"]}
{"type":"entity","name":"Tech Stack - Backend","entityType":"Technology","observations":["Python with Flask web framework","SQLAlchemy ORM for database interaction","SQLite database for development and testing","Flask-RESTful for API endpoints","Flask-CORS for cross-origin request handling","Flask-Migrate for database migrations","pytest for testing","logging module for application logging","Type hints used throughout the codebase"]}
{"type":"entity","name":"Tech Stack - Frontend","entityType":"Technology","observations":["TypeScript as the primary language","Bun as the JavaScript runtime and package manager","React for UI components and state management","Tailwind CSS for styling","shadcn-ui for UI components","REST API calls to backend services","Absolute imports with @/ prefix","Functional components with hooks"]}
{"type":"entity","name":"Schedule Generation Process Flow","entityType":"Process","observations":["Starts with API request to /api/schedules/generate endpoint with start_date and end_date parameters","Backend validates input dates and parameters","System loads necessary resources (employees, shifts, settings, absences, availabilities)","Applies business constraints and rules (keyholder requirements, availability constraints)","Uses algorithm to distribute shifts optimally while respecting constraints","Validates generated schedule against labor laws and business rules","Saves schedule to database with version control","Returns success response with schedule information or error details","Provides detailed generation logs for troubleshooting","Supports regeneration of schedules with different parameters"]}
{"type":"entity","name":"Schedule Distribution Algorithm","entityType":"Component","observations":["Core algorithm for assigning employees to shifts","Considers employee qualifications, availability, and preferences","Respects constraints like min/max hours per employee","Implements rules for keyholders on early/late shifts","Enforces minimum rest periods between shifts","Handles edge cases like understaffing or overstaffing","Includes logging for decision-making process","Prioritizes fair distribution of hours among employees"]}
{"type":"entity","name":"Schedule Validation","entityType":"Process","observations":["Validates schedule against German labor laws","Checks for minimum rest periods between shifts (11 hours)","Enforces maximum working hours per day (10 hours) and week (48 hours)","Ensures breaks are assigned according to shift duration requirements","Verifies keyholder presence for opening/closing shifts","Produces warnings for soft constraint violations","Raises errors for hard constraint violations","Validates employee qualifications for assigned shifts"]}
{"type":"entity","name":"Frontend Component Structure","entityType":"Architecture","observations":["Pages directory contains main application routes","Components are organized by feature/domain","Schedule components are in components/schedule/","Core components handle base functionality","View components handle different visualization types","Dialog components handle modal interactions","Utility components provide reusable functionality","Layout components define page structure","Uses component composition for complex UI"]}
{"type":"entity","name":"Development Environment Setup","entityType":"Process","observations":["Backend setup requires Python virtual environment","Virtual environment is created using python -m venv .venv","Backend dependencies are installed via pip install -r requirements.txt","Environment variables are set for Flask app and development mode","Frontend setup requires Bun or npm","Frontend dependencies are installed with bun install","Development servers can be started manually or using start.sh script","start.sh creates a tmux session with panes for backend, frontend, and control menu"]}
{"type":"entity","name":"Database Schema Management","entityType":"Process","observations":["Uses Flask-Migrate for database migrations","Migration commands are run through Flask CLI","Migrations are created with flask db migrate -m 'description'","Schema upgrades are applied with flask db upgrade","Migrations are stored in src/backend/migrations/","Models define the database schema through SQLAlchemy classes","Foreign key relationships are defined in models","Schema changes require migration scripts to be generated"]}
{"type":"entity","name":"Schichtplan","entityType":"Project","observations":["A shift scheduling application for managing employee work schedules","Has a Flask backend (Python) located at src/backend/","Has a modern frontend using Bun/React with TypeScript located at src/frontend/","Uses SQLite database at src/backend/instance/schichtplan.db","Follows a REST API architecture","Uses authentication through session cookies"]}
{"type":"entity","name":"Backend Architecture","entityType":"Architecture","observations":["Built with Flask (Python)","Uses SQLAlchemy for database ORM","Structured with models, routes, and services","Main app file is src/backend/run.py","Database is SQLite at src/backend/instance/schichtplan.db","Runs on port 5000","Has a RESTful API structure with endpoints prefixed with /api"]}
{"type":"entity","name":"Frontend Architecture","entityType":"Architecture","observations":["Built with React, TypeScript, Bun","Uses Tailwind CSS and shadcn-ui for styling","Located in src/frontend/","Runs on port 5173","Uses React Query for data fetching","Has components, hooks, and services structure"]}
{"type":"entity","name":"Schedule Management","entityType":"Feature","observations":["Allows creating, viewing, and editing employee work schedules","Supports versioning of schedules","Versions can have status: DRAFT, PUBLISHED, ARCHIVED","Schedules are stored with a date range and version number","ScheduleVersionMeta model tracks metadata about schedule versions","Had an issue where the API endpoint format didn't match frontend expectations","Uses a versioning system to manage different iterations of schedules","Schedule versions can be duplicated, compared, and have status changes","API endpoints for schedule versions include /api/schedules/versions and /api/schedules/version","Each version has metadata including date range, creation time, status, and notes"]}
{"type":"entity","name":"Employee Management","entityType":"Feature","observations":["Manages employee data including hours per week","Employees can be in different groups: VZ, TZ, GfB, TL","Employees can have active or inactive status","Employees have relationships with schedule entries"]}
{"type":"entity","name":"Shift Templates","entityType":"Feature","observations":["Defines templates for shifts (early, middle, late)","Includes start time, end time, and break duration","Used as the basis for schedule entries"]}
{"type":"entity","name":"Development Workflow","entityType":"Process","observations":["Uses Git for version control","Backend environment uses Python virtual environment","Frontend uses bun or npm for package management","Follows PEP 8 guidelines for Python code","Uses TypeScript for frontend code","Has a start.sh script for easy startup of both frontend and backend","Created a restart_backend.sh script to simplify server restart with correct environment variables","PYTHONPATH environment variable needed to be set to ensure proper module imports","Application can be started with start.sh script","Uses tmux to manage multiple terminal sessions for backend, frontend, and control menu"]}
{"type":"entity","name":"Version Control Issue","entityType":"Bug","observations":["The issue was in the API endpoint /api/schedules/versions in schedule_versions.py","The endpoint was returning an array of version objects directly: jsonify([v.to_dict() for v in versions_meta])","Frontend's TypeScript interface VersionResponse expected an object with a versions property containing the array: { versions: VersionMeta[] }","Fixed by modifying the endpoint to return: jsonify({\"versions\": [v.to_dict() for v in versions_meta]})","Created restart_backend.sh script to properly restart the backend with the correct Python path","The fix required modifying the API response format to match frontend expectations","The bug was in the structure of the JSON response, not the data itself","We needed to wrap version metadata array in a 'versions' property","This issue was a classic API contract mismatch between frontend and backend","The fix was simple but required understanding both the frontend TypeScript interfaces and backend API structure"]}
{"type":"entity","name":"API Structure","entityType":"Architecture","observations":["RESTful API with JSON responses","All endpoints are prefixed with /api","Standard response format has success, data, and error fields","Authentication through session cookies","Employee endpoints at /api/employees","Shift template endpoints at /api/shifts","Schedule endpoints at /api/schedules","Schedule version endpoints include /api/schedules/versions (GET), /api/schedules/version (POST), /api/schedules/versions/:version/status (PUT)","API supports filtering schedule versions by date range","Version endpoints support operations like creating, updating status, updating notes, duplicating, and deleting","API responses include appropriate HTTP status codes"]}
{"type":"entity","name":"Database Models","entityType":"Component","observations":["Employee model tracks employee information","ShiftTemplate model defines shift templates","Schedule model tracks individual shift assignments","ScheduleVersionMeta model tracks schedule version metadata","StoreConfiguration model stores store settings","All use SQLAlchemy ORM"]}
{"type":"entity","name":"Debugging Techniques","entityType":"Process","observations":["Backend logs can be found at src/logs/backend.log","Flask's debug mode can be enabled with FLASK_ENV=development","Can test API endpoints directly with curl","Created restart_backend.sh script for easy server restarts with correct environment","Browser console errors can be checked for frontend issues","Network requests can be monitored to see API responses"]}
{"type":"entity","name":"Schedule Version Meta","entityType":"Model","observations":["Model name: ScheduleVersionMeta","Primary key is 'version' (integer)","Tracks metadata about schedule versions","Fields include: created_at, created_by, updated_at, updated_by, status, date_range_start, date_range_end, base_version, notes","Status can be DRAFT, PUBLISHED, or ARCHIVED","Has to_dict() method for API serialization"]}
{"type":"entity","name":"Frontend Data Fetching","entityType":"Component","observations":["Uses React Query for data fetching","Encapsulates API calls in service functions","Manages API error handling","Defines TypeScript interfaces for API responses","Uses hooks like useVersionControl to manage version state","Has interceptors for request/response logging"]}
{"type":"entity","name":"Start Script","entityType":"Tool","observations":["Located at start.sh in project root","Sets up required directories","Kills existing processes on ports 5000 and 5173","Creates a tmux session with panes for backend, frontend, and control menu","Waits for services to start","Attaches to the tmux session"]}
{"type":"entity","name":"Application Startup","entityType":"Process","observations":["Backend can be started with 'python run.py' in src/backend","Frontend can be started with 'bun run dev' in src/frontend","Environment variables need to be set for backend: FLASK_APP=run.py, FLASK_ENV=development","PYTHONPATH should be set to project root","The start.sh script automates startup of both frontend and backend","Backend runs on port 5000, frontend on port 5173"]}
{"type":"entity","name":"ScheduleStatus Enum","entityType":"Component","observations":["Defines statuses for schedules: DRAFT, PUBLISHED, ARCHIVED","DRAFT: Initial state, can be modified","PUBLISHED: Published to employees, can't be modified","ARCHIVED: Old schedule, kept for records","Used in both Schedule and ScheduleVersionMeta models"]}
{"type":"entity","name":"React Components","entityType":"Component","observations":["UI components built with React and TypeScript","Use shadcn-ui and Tailwind CSS for styling","Schedule page uses useVersionControl hook to manage versions","Components follow modern React practices with hooks","Located in src/frontend/src/components/"]}
{"type":"entity","name":"Project Documentation","entityType":"Resource","observations":["API documentation in api-documentation.mdc","Development workflow in development-workflow.mdc","Server management in run-server.mdc","Documentation provided as Cursor rules","Instructions for setting up development environment","Guidelines for code style and best practices"]}
{"type":"entity","name":"Error Handling","entityType":"Feature","observations":["Backend uses logger for error tracking","Error logs stored in src/logs/backend.log","API responses include error messages in standard format","Frontend has axios interceptors for error handling","User-friendly error messages in UI","Error responses follow HTTP status codes conventions"]}
{"type":"entity","name":"Database Schema","entityType":"Component","observations":["Employee model with fields for name, employee_id, group, status, hours_per_week","ShiftTemplate model with fields for name, start_time, end_time, type, break_duration","Schedule model linking employees to shifts with dates and versions","ScheduleVersionMeta model for tracking schedule versions","StoreConfiguration model for store settings"]}
{"type":"entity","observations":["Goal: Fully remove Alembic versioning and SQLAlchemy, replacing the Python backend with native Bun SQLite/TypeScript."],"entityType":"Plan","name":"Replace Python Backend with Bun Native SQL"}
{"type":"entity","name":"Analyze Current Python Backend","entityType":"Plan Step","observations":["Identify models, routes, services, and review Alembic migrations to understand the current implementation.","Completed: Identified models in src/backend/models, routes in src/backend/routes, services in src/backend/services (including scheduler subdirectory), and Alembic migrations in src/migrations/versions."]}
{"type":"entity","entityType":"Plan Step","observations":["Choose a Bun framework (e.g., ElysiaJS, Hono) and define the folder structure for the new backend.","Completed: Decided on ElysiaJS framework and defined a directory structure (db/, routes/, services/, lib/, index.ts) within src/bun-backend/."],"name":"Design New Bun Backend Structure"}
{"type":"entity","name":"Define Database Schema in TypeScript","entityType":"Plan Step","observations":["Translate SQLAlchemy models to TypeScript interfaces/classes and plan relationship representation.","Completed: Translated SQLAlchemy models (Absence, Employee, EmployeeAvailability, Coverage, RecurringCoverage, ShiftPattern, ShiftTemplate, Schedule, ScheduleVersionMeta, Settings) into TypeScript interfaces in src/bun-backend/db/schema.ts. Defined helper interfaces for JSON column structures. Noted potential redundancies/inconsistencies (e.g., day indexing, redundant Schedule fields, VersionMeta vs ScheduleVersionMeta)."]}
{"type":"entity","observations":["Decide on a method to replace Alembic for schema management (manual SQL, library, custom script). Create initial schema script.","Completed: Decided on using manual SQL scripts (e.g., init-schema.sql) executed via a Bun script (migrate.ts) for initial schema creation and potentially future migrations, managed via package.json scripts."],"name":"Implement Migration Strategy","entityType":"Plan Step"}
{"type":"entity","observations":["Write utilities/services to handle database connections and queries using `bun:sqlite`.","Completed: Created src/bun-backend/db/index.ts to establish connection using bun:sqlite. Created src/bun-backend/tsconfig.json with 'bun-types' to resolve type errors."],"name":"Setup Bun SQLite Connection","entityType":"Plan Step"}
{"type":"entity","observations":["Translate SQLAlchemy service queries into raw SQL executed via `bun:sqlite`.","Partially Completed: Created src/bun-backend/services/employeesService.ts and implemented getAllEmployees function using bun:sqlite and raw SQL. Established pattern for translating remaining service logic: define async function, write SQL, execute with db.query().get/all/run, map data to/from TypeScript interfaces from schema.ts.","Added getScheduleByVersion and getScheduleVersions functions to scheduleService.ts.","Refactored Employee, Coverage, and Settings services (employeesService.ts, coverageService.ts, settingsService.ts) to accept an optional Database instance for dependency injection during testing."],"name":"Implement DB Interaction Logic","entityType":"Plan Step"}
{"type":"entity","name":"Re-implement API Endpoints","observations":["Translate Flask routes to the chosen Bun framework, matching the original API contract.","Partially Completed: Created main Elysia app entry point (src/bun-backend/index.ts) with CORS and basic error handling. Created employee routes module (src/bun-backend/routes/employees.ts) and implemented GET /api/employees endpoint, calling the corresponding service function. Established pattern for implementing remaining endpoints using Elysia routing and service calls.","Added GET /api/schedules/version/:version and GET /api/schedules/versions routes to routes/schedules.ts with validation."],"entityType":"Plan Step"}
{"type":"entity","name":"Handle Data Migration","entityType":"Plan Step","observations":["Determine if existing data needs migration or if the initial schema script suffices.","Completed: Created initial schema SQL file (src/bun-backend/db/init-schema.sql) based on TypeScript interfaces. Created migration script (src/bun-backend/db/migrate.ts) to execute the SQL. Created src/bun-backend/package.json with 'db:init' script. Data migration (copying existing data) deferred until confirmed necessary."]}
{"type":"entity","observations":["Modify frontend service calls if the backend API URL or endpoints change.","Completed: Updated Vite dev server proxy target in src/frontend/vite.config.ts to port 5001. Updated fallback API base URL in src/frontend/src/services/api.ts to port 5001."],"entityType":"Plan Step","name":"Update Frontend API Calls"}
{"type":"entity","observations":["Create unit and integration tests for the new Bun backend to ensure functional parity.","Partially Completed: Created placeholder unit test file (src/bun-backend/services/employeesService.test.ts) using bun:test. Outlined structure for service unit tests and API integration tests. Highlighted the need for service refactoring (dependency injection) for effective DB mocking/testing.","Refactored service tests (employeesService.test.ts, coverageService.test.ts, settingsService.test.ts) to use beforeAll/afterAll for DB setup and to pass the test DB instance to service functions.","Fixed remaining linter errors in employeesService.test.ts related to type mismatches and null checks."],"entityType":"Plan Step","name":"Implement Testing"}
{"type":"entity","entityType":"Plan Step","name":"Cleanup and Documentation","observations":["Remove old Python backend code, Alembic files, and update project documentation (README, run guides).","Partially Completed: Updated run-server.mdc and development-workflow.mdc documentation to reflect the new Bun/ElysiaJS backend, commands, and structure. Deferring README.md update and deletion of old Python code until Bun backend is stable."]}
{"type":"entity","observations":["Refactored to use flat Settings structure.","Correctly passes props to EmployeeSettingsEditor and ShiftTypesEditor.","Fixed handling of Availability Types (color edit only)."],"name":"OptionsPage.tsx","entityType":"CodeComponent"}
{"type":"entity","name":"SettingsPage.tsx","observations":["Refactored to use flat Settings structure.","Corrected prop handling for PDFLayoutEditor."],"entityType":"CodeComponent"}
{"type":"entity","name":"EmployeePage.tsx","observations":["Resolved 'employee_types undefined' error by adding loading checks via useEmployeeGroups hook.","Correctly passes absence_types to AbsenceModal."],"entityType":"CodeComponent"}
{"type":"entity","observations":["Resolved 'shifts.map is not a function' error by adding loading check in ShiftTemplateEditor."],"name":"ShiftsPage.tsx","entityType":"CodeComponent"}
{"type":"entity","observations":["Refactored to use flat Settings structure."],"entityType":"CodeComponent","name":"CoveragePage.tsx"}
{"type":"entity","observations":["Refactored to use flat Settings structure (settings.employee_types).","Added loading state checks and exposed isLoading.","Provides defaults for employee type hours."],"name":"useEmployeeGroups.ts","entityType":"CodeComponent"}
{"type":"entity","entityType":"CodeComponent","name":"ShiftTemplateEditor.tsx","observations":["Added check for Array.isArray(shifts) before mapping."]}
{"type":"entity","entityType":"CodeComponent","observations":["Integrated Pino for structured logging (requests, errors).","Added request ID middleware.","Commented out response logging temporarily due to typing issues."],"name":"index.ts (backend)"}
{"type":"entity","name":"settings.ts (backend routes)","entityType":"CodeComponent","observations":["Added missing PUT / handler for bulk settings updates.","Replaced console logs with Pino logger.","Fixed GET / handler call (getSettings vs getAllSettings)."]}
{"type":"entity","entityType":"CodeComponent","observations":["Added GET / route as alias for GET /versions."],"name":"schedules.ts (backend routes)"}
{"type":"entity","entityType":"CodeComponent","name":"types/index.ts (frontend types)","observations":["Flattened the Settings interface to match API response.","Corrected AvailabilityTypeSetting structure."]}
{"type":"entity","entityType":"Script","name":"start.sh","observations":["Fixed hangs by removing lsof calls from kill_port function.","Uses ss and pkill -f for process termination.","Added NODE_ENV=development for backend start."]}
{"type":"entity","observations":["Updated to restart Bun backend within tmux session if available."],"entityType":"Script","name":"restart_backend.sh"}
{"type":"entity","observations":["Updated restart_backend function to handle Bun backend on port 5001."],"name":"menu.sh","entityType":"Script"}
{"type":"entity","observations":["Added as logging library to Bun backend."],"entityType":"Library","name":"Pino"}
{"type":"entity","entityType":"Sub-Project","observations":[],"name":"bun-backend"}
{"type":"entity","entityType":"Technology","name":"ElysiaJS","observations":["Web framework designed for Bun","Used in bun-backend for HTTP server"]}
{"type":"entity","observations":["Cross-platform shell scripting using TypeScript/JavaScript syntax within Bun"],"name":"Bun Shell","entityType":"Technology"}
{"type":"entity","entityType":"Technology","name":"bun:sqlite","observations":["Bun's native, high-performance SQLite driver"]}
{"type":"entity","entityType":"Tool","observations":["Bun's built-in fast, Jest-compatible test runner"],"name":"bun test"}
{"type":"entity","entityType":"Configuration File","name":".editorconfig","observations":[]}
{"type":"entity","name":".prettierrc.json","observations":[],"entityType":"Configuration File"}
{"type":"entity","entityType":"Configuration File","observations":[],"name":".prettierignore"}
{"type":"entity","name":".eslintignore","entityType":"Configuration File","observations":[]}
{"type":"entity","entityType":"Configuration File","observations":[],"name":".gitattributes"}
{"type":"entity","entityType":"Script File","observations":[],"name":"frontend/scripts/clean.ts"}
{"type":"entity","observations":[],"entityType":"Script File","name":"frontend/scripts/cacheClear.ts"}
{"type":"entity","entityType":"Script File","name":"frontend/scripts/installClean.ts","observations":[]}
{"type":"entity","entityType":"Script File","observations":[],"name":"frontend/scripts/check.ts"}
{"type":"entity","entityType":"Script File","observations":[],"name":"frontend/scripts/ci.ts"}
{"type":"entity","entityType":"Database","observations":["Lightweight file-based relational database"],"name":"SQLite"}
{"type":"relation","from":"Schichtplan Project","to":"Models","relationType":"contains"}
{"type":"relation","from":"Schichtplan Project","to":"API Endpoints","relationType":"contains"}
{"type":"relation","from":"Schichtplan Project","to":"Test Infrastructure","relationType":"contains"}
{"type":"relation","from":"Schichtplan Project","to":"ScheduleResources","relationType":"contains"}
{"type":"relation","from":"Test Infrastructure","to":"Testing Challenges","relationType":"experienced"}
{"type":"relation","from":"Test Fixes","to":"Testing Challenges","relationType":"resolves"}
{"type":"relation","from":"ScheduleResources","to":"Models","relationType":"uses"}
{"type":"relation","from":"API Endpoints","to":"Models","relationType":"uses"}
{"type":"relation","from":"API Endpoints","to":"ScheduleResources","relationType":"uses"}
{"type":"relation","from":"Schichtplan Project","to":"Schedule Generation Logic","relationType":"contains"}
{"type":"relation","from":"Schichtplan Project","to":"Database Design","relationType":"contains"}
{"type":"relation","from":"Models","to":"Database Design","relationType":"implements"}
{"type":"relation","from":"ShiftTemplate Validation","to":"Models","relationType":"is part of"}
{"type":"relation","from":"Schedule Generation Logic","to":"ScheduleResources","relationType":"uses"}
{"type":"relation","from":"API Endpoints","to":"Schedule Generation Logic","relationType":"exposes"}
{"type":"relation","from":"Testing Challenges","to":"ShiftTemplate Validation","relationType":"affected"}
{"type":"relation","from":"Schichtplan Project","to":"Employee Availability System","relationType":"contains"}
{"type":"relation","from":"Test Infrastructure","to":"Test Data Fixtures","relationType":"contains"}
{"type":"relation","from":"Employee Availability System","to":"Schedule Generation Logic","relationType":"constrains"}
{"type":"relation","from":"Test Fixes","to":"Test Data Fixtures","relationType":"improved"}
{"type":"relation","from":"ScheduleResources","to":"Employee Availability System","relationType":"interacts with"}
{"type":"relation","from":"Schichtplan Project","to":"Project Structure","relationType":"is organized as"}
{"type":"relation","from":"Schichtplan Project","to":"Tech Stack - Backend","relationType":"uses"}
{"type":"relation","from":"Schichtplan Project","to":"Tech Stack - Frontend","relationType":"uses"}
{"type":"relation","from":"Project Structure","to":"Models","relationType":"defines location of"}
{"type":"relation","from":"Project Structure","to":"Test Infrastructure","relationType":"defines location of"}
{"type":"relation","from":"Project Structure","to":"ScheduleResources","relationType":"defines location of"}
{"type":"relation","from":"Schedule Generation Logic","to":"Schedule Generation Process Flow","relationType":"follows"}
{"type":"relation","from":"Schedule Generation Process Flow","to":"Schedule Distribution Algorithm","relationType":"uses"}
{"type":"relation","from":"Schedule Generation Process Flow","to":"Schedule Validation","relationType":"includes"}
{"type":"relation","from":"Schedule Generation Process Flow","to":"ScheduleResources","relationType":"depends on"}
{"type":"relation","from":"API Endpoints","to":"Schedule Generation Process Flow","relationType":"triggers"}
{"type":"relation","from":"Schedule Validation","to":"ShiftTemplate Validation","relationType":"builds upon"}
{"type":"relation","from":"Schedule Distribution Algorithm","to":"Employee Availability System","relationType":"respects"}
{"type":"relation","from":"Tech Stack - Frontend","to":"Frontend Component Structure","relationType":"defines"}
{"type":"relation","from":"Tech Stack - Backend","to":"Database Schema Management","relationType":"includes"}
{"type":"relation","from":"Schichtplan Project","to":"Development Environment Setup","relationType":"requires"}
{"type":"relation","from":"Database Schema Management","to":"Models","relationType":"defines"}
{"type":"relation","from":"Frontend Component Structure","to":"Project Structure","relationType":"is part of"}
{"type":"relation","from":"Development Environment Setup","to":"Project Structure","relationType":"initializes"}
{"type":"relation","from":"Schichtplan","to":"Backend Architecture","relationType":"has component"}
{"type":"relation","from":"Schichtplan","to":"Frontend Architecture","relationType":"has component"}
{"type":"relation","from":"Schichtplan","to":"Schedule Management","relationType":"implements feature"}
{"type":"relation","from":"Schichtplan","to":"Employee Management","relationType":"implements feature"}
{"type":"relation","from":"Schichtplan","to":"Shift Templates","relationType":"implements feature"}
{"type":"relation","from":"Schichtplan","to":"API Structure","relationType":"defines"}
{"type":"relation","from":"Backend Architecture","to":"Database Models","relationType":"contains"}
{"type":"relation","from":"Schedule Management","to":"Version Control Issue","relationType":"had bug"}
{"type":"relation","from":"Development Workflow","to":"Schichtplan","relationType":"used for"}
{"type":"relation","from":"Frontend Architecture","to":"Backend Architecture","relationType":"communicates with"}
{"type":"relation","from":"Project Structure","to":"Schichtplan","relationType":"organizes"}
{"type":"relation","from":"Schedule Management","to":"Schedule Version Meta","relationType":"uses"}
{"type":"relation","from":"Frontend Data Fetching","to":"API Structure","relationType":"depends on"}
{"type":"relation","from":"Version Control Issue","to":"Schedule Version Meta","relationType":"involved"}
{"type":"relation","from":"Version Control Issue","to":"Frontend Data Fetching","relationType":"involved"}
{"type":"relation","from":"Debugging Techniques","to":"Schichtplan","relationType":"applied to"}
{"type":"relation","from":"Start Script","to":"Development Workflow","relationType":"supports"}
{"type":"relation","from":"Schedule Version Meta","to":"Database Models","relationType":"is part of"}
{"type":"relation","from":"Frontend Data Fetching","to":"Frontend Architecture","relationType":"is part of"}
{"type":"relation","from":"Application Startup","to":"Start Script","relationType":"managed by"}
{"type":"relation","from":"ScheduleStatus Enum","to":"Schedule Version Meta","relationType":"used by"}
{"type":"relation","from":"ScheduleStatus Enum","to":"Database Models","relationType":"is part of"}
{"type":"relation","from":"React Components","to":"Frontend Architecture","relationType":"is part of"}
{"type":"relation","from":"React Components","to":"Frontend Data Fetching","relationType":"uses"}
{"type":"relation","from":"Schedule Management","to":"ScheduleStatus Enum","relationType":"uses"}
{"type":"relation","from":"Application Startup","to":"Development Workflow","relationType":"is part of"}
{"type":"relation","from":"API Endpoints","to":"API Structure","relationType":"implements"}
{"type":"relation","from":"Project Documentation","to":"Development Workflow","relationType":"guides"}
{"type":"relation","from":"Error Handling","to":"Backend Architecture","relationType":"is part of"}
{"type":"relation","from":"Error Handling","to":"Frontend Architecture","relationType":"is part of"}
{"type":"relation","from":"Database Schema","to":"Database Models","relationType":"defines"}
{"type":"relation","from":"Debugging Techniques","to":"Error Handling","relationType":"uses"}
{"type":"relation","from":"Project Documentation","to":"Schichtplan","relationType":"describes"}
{"type":"relation","from":"Replace Python Backend with Bun Native SQL","to":"Analyze Current Python Backend","relationType":"includes step"}
{"type":"relation","to":"Design New Bun Backend Structure","relationType":"includes step","from":"Replace Python Backend with Bun Native SQL"}
{"type":"relation","from":"Replace Python Backend with Bun Native SQL","to":"Define Database Schema in TypeScript","relationType":"includes step"}
{"type":"relation","to":"Implement Migration Strategy","relationType":"includes step","from":"Replace Python Backend with Bun Native SQL"}
{"type":"relation","relationType":"includes step","to":"Setup Bun SQLite Connection","from":"Replace Python Backend with Bun Native SQL"}
{"type":"relation","from":"Replace Python Backend with Bun Native SQL","relationType":"includes step","to":"Implement DB Interaction Logic"}
{"type":"relation","to":"Re-implement API Endpoints","relationType":"includes step","from":"Replace Python Backend with Bun Native SQL"}
{"type":"relation","to":"Handle Data Migration","from":"Replace Python Backend with Bun Native SQL","relationType":"includes step"}
{"type":"relation","relationType":"includes step","from":"Replace Python Backend with Bun Native SQL","to":"Update Frontend API Calls"}
{"type":"relation","relationType":"includes step","to":"Implement Testing","from":"Replace Python Backend with Bun Native SQL"}
{"type":"relation","relationType":"includes step","from":"Replace Python Backend with Bun Native SQL","to":"Cleanup and Documentation"}
{"type":"relation","to":"Design New Bun Backend Structure","relationType":"precedes","from":"Analyze Current Python Backend"}
{"type":"relation","relationType":"precedes","to":"Define Database Schema in TypeScript","from":"Design New Bun Backend Structure"}
{"type":"relation","to":"Implement Migration Strategy","relationType":"precedes","from":"Define Database Schema in TypeScript"}
{"type":"relation","from":"Implement Migration Strategy","to":"Setup Bun SQLite Connection","relationType":"precedes"}
{"type":"relation","relationType":"precedes","to":"Implement DB Interaction Logic","from":"Setup Bun SQLite Connection"}
{"type":"relation","relationType":"precedes","from":"Implement DB Interaction Logic","to":"Re-implement API Endpoints"}
{"type":"relation","relationType":"precedes","to":"Handle Data Migration","from":"Re-implement API Endpoints"}
{"type":"relation","to":"Update Frontend API Calls","from":"Handle Data Migration","relationType":"precedes"}
{"type":"relation","relationType":"precedes","from":"Update Frontend API Calls","to":"Implement Testing"}
{"type":"relation","to":"Cleanup and Documentation","relationType":"precedes","from":"Implement Testing"}
{"type":"relation","relationType":"uses","to":"EmployeeAvailability (TypeScript)","from":"generateSchedule (TypeScript)"}
{"type":"relation","relationType":"uses","to":"Absence (TypeScript)","from":"generateSchedule (TypeScript)"}
{"type":"relation","from":"generateSchedule (TypeScript)","relationType":"uses","to":"Coverage (TypeScript)"}
{"type":"relation","relationType":"uses","from":"generateSchedule (TypeScript)","to":"RecurringCoverage (TypeScript)"}
{"type":"relation","from":"generateSchedule (TypeScript)","to":"Settings (TypeScript)","relationType":"uses"}
{"type":"relation","relationType":"performs","from":"generateSchedule (TypeScript)","to":"Data Preprocessing (TypeScript)"}
{"type":"relation","relationType":"implements","to":"FIX/PRF/AVL Prioritization","from":"generateSchedule (TypeScript)"}
{"type":"relation","relationType":"uses","to":"ScheduleResources (Python)","from":"ScheduleGenerator (Python)"}
{"type":"relation","from":"ScheduleGenerator (Python)","relationType":"implements","to":"FIX/PRF/AVL Prioritization"}
{"type":"relation","from":"Schichtplan","relationType":"HAS_SUB_PROJECT","to":"bun-backend"}
{"type":"relation","to":"frontend","from":"Schichtplan","relationType":"HAS_SUB_PROJECT"}
{"type":"relation","to":"ElysiaJS","from":"bun-backend","relationType":"USES_TECHNOLOGY"}
{"type":"relation","from":"bun-backend","relationType":"USES_TECHNOLOGY","to":"TypeScript"}
{"type":"relation","relationType":"USES_DATABASE","to":"SQLite","from":"bun-backend"}
{"type":"relation","to":"bun test","relationType":"USES_TEST_RUNNER","from":"bun-backend"}
{"type":"relation","relationType":"USES_LIBRARY","to":"Pino","from":"bun-backend"}
{"type":"relation","relationType":"USES_TEST_RUNNER","from":"frontend","to":"bun test"}
{"type":"relation","to":"frontend/scripts/clean.ts","relationType":"CONTAINS_FILE","from":"frontend"}
{"type":"relation","relationType":"CONTAINS_FILE","to":"frontend/scripts/cacheClear.ts","from":"frontend"}
{"type":"relation","to":"frontend/scripts/installClean.ts","relationType":"CONTAINS_FILE","from":"frontend"}
{"type":"relation","from":"frontend","to":"frontend/scripts/check.ts","relationType":"CONTAINS_FILE"}
{"type":"relation","relationType":"CONTAINS_FILE","from":"frontend","to":"frontend/scripts/ci.ts"}
{"type":"relation","to":"Bun Shell","relationType":"USES_TECHNOLOGY","from":"frontend/scripts/clean.ts"}
{"type":"relation","to":"Bun Shell","from":"frontend/scripts/cacheClear.ts","relationType":"USES_TECHNOLOGY"}
{"type":"relation","relationType":"USES_TECHNOLOGY","from":"frontend/scripts/installClean.ts","to":"Bun Shell"}
{"type":"relation","to":"Bun Shell","from":"frontend/scripts/check.ts","relationType":"USES_TECHNOLOGY"}
{"type":"relation","relationType":"USES_TECHNOLOGY","from":"frontend/scripts/ci.ts","to":"Bun Shell"}
{"type":"relation","relationType":"HAS_CONFIGURATION","to":".editorconfig","from":"Schichtplan"}
{"type":"relation","from":"Schichtplan","to":".prettierrc.json","relationType":"HAS_CONFIGURATION"}
{"type":"relation","from":"Schichtplan","relationType":"HAS_CONFIGURATION","to":".prettierignore"}
{"type":"relation","relationType":"HAS_CONFIGURATION","from":"Schichtplan","to":".eslintignore"}
{"type":"relation","relationType":"HAS_CONFIGURATION","to":".gitattributes","from":"Schichtplan"}